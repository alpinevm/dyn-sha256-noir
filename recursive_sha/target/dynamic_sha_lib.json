{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":12219390342068189353,"abi":{"parameters":[{"name":"expected_hash_encoded","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"encoded_data","type":{"kind":"array","length":1033,"type":{"kind":"field"}},"visibility":"public"}],"param_witnesses":{"encoded_data":[{"start":2,"end":1035}],"expected_hash_encoded":[{"start":0,"end":2}]},"return_type":null,"return_witnesses":[],"error_types":{}},"bytecode":"","debug_symbols":"zd3BahxHFIbRd5m1Fn3/6q6q1quEEGRbDgIjGUsOBON3j+w4IsYDxr2QznKkvtJdFB/DMIf6dHpz/erjn3/c3L69uz9d/vbp9O7u9dXDzd3t46tPp+Xrj+7fX91+eXX/cPXh4XTZZ784Xd++OV2OGp8vTm9v3l2fLtf++eKHR/dZ3x6tpdrTs8mZZ6vt//3dWtt3D/9+cSpmkzCbNGaTldlkYzbpzCaD2WQym+xO2aDIOpUtJ7PldLac0JZT2nJSW05ry4ltObWNU9tA72md2sapbZzaxqltnNrGqW2c2sapbXNq25zaNugjBKe2zaltc2rbnNo2p7bNqW1zars6tV2d2q5ObVfoE1untqtT29Wp7erUdnVquzq13Zzabk5tN6e2m1Pbzant5tR2c2q7ObXdnNpuTm27U9vu1LY7te1ObbtT2w59H8GpbXdq253adqe2w6ntcGo7nNoOp7bDqe1wajugr385tR1ObYdT2+nUdjq1nU5tp1Pb6dR2OrWdTm0n9G1bp7bTqe3u1HZ3ars7td2d2u5ObXentrtT292p7Q7hBkk3QLxhgXzDAgGHBRIOi5PcWiDjsEDIYYGUwwIxhwXqLsXKoO5KsEySZRItk2yZhMskXSbxMsiXFQTMChJmBRGzgoxZQcisIGVWEDMryJkVBM0KkmYFUbOCrFlB2KwgbVYQNyvImxUEzgoSZwWRs4LMWUHorCB1VhA7K8idFQTPCpJnBdGzguxZQfisIH1WED8ryJ8VBNAKEmgFEbSCDFpBCK0ghVYQQyvIoRUE0QqSaAVRtIIsWkEYrSCNVhBHK8ijFQTSChJpBZG0gkxaQSitIJVWEEsryKUVBNMKkmkF0bSCbFpBOK0gnVYQTyvIpxUE1AoSagURtYKMWkFIrSClVhBTK8ipFQTVCpJqBVG1gqxaQVitIK1WEFcryKsF8mqBvFogrxbIq2VxuhvIqwXyaoG8WiCvFsirBfJqgbxaIK8WyKsF8mqBvFogrxbIqwXyapHuQ5MuRKNuRIO6K92JJl2KJt2KJl2LJt2LJl2MBnm1QF4tkFcL5NUCebVAXi2QVwvk1QJ5tUBeLZBXC+TVAnm1QF4tkFcL5NUCebVAXi2QVwvk1QJ5tUBeLZBXC+TVAnm1QF4tkFcL5NUCebVAXi2QVwvk1QJ5tUBeLZBXC+TVAnm1QF4tkFcL5NUCebVAXi2QVwvk1QJ5tUBeLZBXC+TVAnm1QF4tkFcL5NUCebVAXi2QVwvk1QJ5tUBeLZBXC+TVAnm1QF4tkFcL5NUCebVAXi2QVwvk1QJ5tUBeLZBXa5BXa5BXa5BXa5BXa4vT3QZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tQZ5tXbeq81l/TYzt+3Zdjnv1V5ol4J2CbRLg3ZZoV02aJcO7TKgXSa0C9TdFeruCnV3hbp73qvtfTz9g+X53jScB2svtcwmLdOlZYa0zJSW2aFlzrO1l1qmpGUiLSMVeJMKvEkF3qQCb1KBN6nAm1TgLhW4SwXuUoG7VOAuFbhLBe5SgbtU4C4VuEsFHlKBh1TgIRV4SAUeUoGHVOAhFXhIBR5SgYdU4CkVeEoFnlKBp1TgKRV4SgWeUoGnVOApFXhKBT7P22pp+9N/GPP5tilqm1DbnI1wpT2dm/Tl/9t8HVp/OjTGD0PbkaF+ZGgcGZpHhvZfH1rPG6SfDdWRoRwZakeG1iND25GhfmRoHBmaR4aOnIg6ciLqyImoIyeijpyIOnIi6siJqCMnoo6ciDpyIurIiciRE5EjJyJHTkSOnIgcORH55RPx+OKvqw83V6/eXd8/jnz53cfb1w83d7ffXj78/f7f3zw++w8=","file_map":{"22":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"46":{"source":"use dep::std;\n\n// Amount of bytes this circuit will consume from encoded_data\nglobal BYTELEN = 226;\n// the amount of Field chunks needed to store BYTELEN amount of u8s should always be => ceil(BYTELEN/31)\nglobal BYTELEN_CHUNK = (BYTELEN + 30) / 31;\n// overflow, if bytelen mod 31 is equal to 0 then we set overflow equal to 31\nglobal OVERFLOW = (BYTELEN % 31) + ((BYTELEN % 31 == 0) as u32 * 31);\nglobal MAX_BYTE_CHUNKS = 1033;\n\n#[recursive]\nfn main(expected_hash_encoded: pub [Field; 2], encoded_data: pub [Field; MAX_BYTE_CHUNKS]) {\n\tassert(MAX_BYTE_CHUNKS >= (BYTELEN/BYTELEN_CHUNK));\n\tlet mut data: [u8; BYTELEN] = [0; BYTELEN];\n\tfor i in 0..BYTELEN_CHUNK-1 {\n\t\tlet decoded_field = encoded_data[i].to_be_bytes(31);\n\t\tfor j in 0..31 {\n\t\t\tdata[(i*31)+j] = decoded_field[j];\n\t\t}\n\t}\n\tlet decoded_field = encoded_data[BYTELEN_CHUNK-1].to_be_bytes(OVERFLOW);\n\tfor i in 0..OVERFLOW {\n\t\tdata[((BYTELEN_CHUNK-1)*31)+i] = decoded_field[i];\n\t}\n\tlet expected_hash_l1: [u8] = expected_hash_encoded[0].to_be_bytes(31);\n\tlet expected_hash_l2: [u8] = expected_hash_encoded[1].to_be_bytes(1);\n\tlet mut expected_hash: [u8; 32] = [0; 32];\n\tfor i in 0..31{\n\t\texpected_hash[i] = expected_hash_l1[i];\t\n\t}\n\texpected_hash[31] = expected_hash_l2[0];\n\tassert(std::hash::sha256(data) == expected_hash);\n}\n\n#[test]\nfn simple_test(){\n\t// using 63 as bytelen\n\tlet mut encoded_data: [Field; MAX_BYTE_CHUNKS] = [0; MAX_BYTE_CHUNKS];\n\tencoded_data[0] = 0x11111111111111111111111111111111111111111111111111111111111111;\n\tencoded_data[1] = 0xddddddddddddddddddaddddddddddddddddddddddddddddddddddddddddddd;\n\tencoded_data[2] = 0xdd;\n\tmain(\n\t\t[0x9f41fb1adcfc3bbe3f6b1df9f008c33eefeddcc7dcdd7266c5c5ddadda0398, 0xb5],\n\t\tencoded_data\n\t);\n}\n","path":"/home/alpinevm/Development/rift/dyn-sha256-noir/recursive_sha/src/main.nr"}},"names":["main"]}